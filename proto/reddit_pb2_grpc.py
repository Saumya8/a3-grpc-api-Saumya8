# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import reddit_pb2 as proto_dot_reddit__pb2


class RedditServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/redditDataModel.RedditService/CreatePost',
                request_serializer=proto_dot_reddit__pb2.Post.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.Post.FromString,
                )
        self.UpvoteDownvotePost = channel.unary_unary(
                '/redditDataModel.RedditService/UpvoteDownvotePost',
                request_serializer=proto_dot_reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.Post.FromString,
                )
        self.RetrievePostContent = channel.unary_unary(
                '/redditDataModel.RedditService/RetrievePostContent',
                request_serializer=proto_dot_reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/redditDataModel.RedditService/CreateComment',
                request_serializer=proto_dot_reddit__pb2.Comment.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.Comment.FromString,
                )
        self.UpvoteDownvoteComment = channel.unary_unary(
                '/redditDataModel.RedditService/UpvoteDownvoteComment',
                request_serializer=proto_dot_reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.Comment.FromString,
                )
        self.RetrieveTopNComments = channel.unary_unary(
                '/redditDataModel.RedditService/RetrieveTopNComments',
                request_serializer=proto_dot_reddit__pb2.TopNCommentsRequest.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.TopNCommentsResponse.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/redditDataModel.RedditService/ExpandCommentBranch',
                request_serializer=proto_dot_reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.ExpandCommentBranchResponse.FromString,
                )
        self.MonitorUpdates = channel.unary_stream(
                '/redditDataModel.RedditService/MonitorUpdates',
                request_serializer=proto_dot_reddit__pb2.MonitorUpdatesRequest.SerializeToString,
                response_deserializer=proto_dot_reddit__pb2.ScoreUpdate.FromString,
                )


class RedditServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Post-related operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteDownvotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrievePostContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Comment-related operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteDownvoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveTopNComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Expand a comment branch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorUpdates(self, request, context):
        """Extra credit: Monitor updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=proto_dot_reddit__pb2.Post.FromString,
                    response_serializer=proto_dot_reddit__pb2.Post.SerializeToString,
            ),
            'UpvoteDownvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteDownvotePost,
                    request_deserializer=proto_dot_reddit__pb2.UpvoteDownvoteRequest.FromString,
                    response_serializer=proto_dot_reddit__pb2.Post.SerializeToString,
            ),
            'RetrievePostContent': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrievePostContent,
                    request_deserializer=proto_dot_reddit__pb2.PostRequest.FromString,
                    response_serializer=proto_dot_reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=proto_dot_reddit__pb2.Comment.FromString,
                    response_serializer=proto_dot_reddit__pb2.Comment.SerializeToString,
            ),
            'UpvoteDownvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteDownvoteComment,
                    request_deserializer=proto_dot_reddit__pb2.UpvoteDownvoteRequest.FromString,
                    response_serializer=proto_dot_reddit__pb2.Comment.SerializeToString,
            ),
            'RetrieveTopNComments': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveTopNComments,
                    request_deserializer=proto_dot_reddit__pb2.TopNCommentsRequest.FromString,
                    response_serializer=proto_dot_reddit__pb2.TopNCommentsResponse.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=proto_dot_reddit__pb2.ExpandCommentBranchRequest.FromString,
                    response_serializer=proto_dot_reddit__pb2.ExpandCommentBranchResponse.SerializeToString,
            ),
            'MonitorUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.MonitorUpdates,
                    request_deserializer=proto_dot_reddit__pb2.MonitorUpdatesRequest.FromString,
                    response_serializer=proto_dot_reddit__pb2.ScoreUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'redditDataModel.RedditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedditService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/redditDataModel.RedditService/CreatePost',
            proto_dot_reddit__pb2.Post.SerializeToString,
            proto_dot_reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteDownvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/redditDataModel.RedditService/UpvoteDownvotePost',
            proto_dot_reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
            proto_dot_reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrievePostContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/redditDataModel.RedditService/RetrievePostContent',
            proto_dot_reddit__pb2.PostRequest.SerializeToString,
            proto_dot_reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/redditDataModel.RedditService/CreateComment',
            proto_dot_reddit__pb2.Comment.SerializeToString,
            proto_dot_reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteDownvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/redditDataModel.RedditService/UpvoteDownvoteComment',
            proto_dot_reddit__pb2.UpvoteDownvoteRequest.SerializeToString,
            proto_dot_reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveTopNComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/redditDataModel.RedditService/RetrieveTopNComments',
            proto_dot_reddit__pb2.TopNCommentsRequest.SerializeToString,
            proto_dot_reddit__pb2.TopNCommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/redditDataModel.RedditService/ExpandCommentBranch',
            proto_dot_reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
            proto_dot_reddit__pb2.ExpandCommentBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/redditDataModel.RedditService/MonitorUpdates',
            proto_dot_reddit__pb2.MonitorUpdatesRequest.SerializeToString,
            proto_dot_reddit__pb2.ScoreUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
