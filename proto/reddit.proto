syntax="proto3";

package redditDataModel;


service RedditService {
    // Post-related operations
    rpc CreatePost(Post) returns (Post);
    rpc UpvoteDownvotePost(UpvoteDownvoteRequest) returns (Post);
    rpc RetrievePostContent(PostRequest) returns (Post);

    // Comment-related operations
    rpc CreateComment(Comment) returns (Comment);
    rpc UpvoteDownvoteComment(UpvoteDownvoteRequest) returns (Comment);
    rpc RetrieveTopNComments(TopNCommentsRequest) returns (TopNCommentsResponse);

    // Expand a comment branch
    rpc ExpandCommentBranch(ExpandCommentBranchRequest) returns (ExpandCommentBranchResponse);

    // Extra credit: Monitor updates
    rpc MonitorUpdates(MonitorUpdatesRequest) returns (stream ScoreUpdate);
}

//Enum

// Unique Enum for Post State
enum PostState {
    POST_NORMAL = 0;
    POST_LOCKED = 1;
    POST_HIDDEN = 2;
}

// Unique Enum for Comment State
enum CommentState {
    COMMENT_NORMAL = 0;
    COMMENT_HIDDEN = 1;
}

// Unique Enum for Subreddit Visibility
enum SubredditVisibility {
    SUBREDDIT_PUBLIC = 0;
    SUBREDDIT_PRIVATE = 1;
    SUBREDDIT_HIDDEN = 2;
}

// Messages
// User
message User {
    string user_id = 1; // Human-readable user ID
}

// Post
message Post {
    string id = 1; // Unique identifier - 'p1', 'p2', etc.
    string title = 2;
    string text = 3;
    oneof media {
        string video_url = 4;
        string image_url = 5;
    }
    string author = 6; //gRPC is by default optional
    int32 score = 7;
    PostState state = 8;
    int64 publication_date = 9;
    int32 subreddit_id = 10;
}

// Comment
message Comment {
    // should have comment ID and parent ID
    string comment_id = 1;
    string author = 2;
    int32 score = 3;
    CommentState state = 4;
    int64 publication_date = 5;
    string parent_id = 6; // Post ID or Parent Comment ID
    string text = 7;

}

// Tag
message Tag {
    string name = 1; // Name of the tag
}

// Subreddit
message Subreddit {
    int32 subreddit_id = 1;
    string name = 2; // Human-readable name
    SubredditVisibility visibility = 3;
    repeated Tag tags = 4; // List of tags associated with the subreddit
}



// Supporting messages for the service
message UpvoteDownvoteRequest {
    string item_id = 1; // Post or Comment ID
    bool upvote = 2; // True for upvote, false for downvote
}

message PostRequest {
    string post_id = 1;
}

message TopNCommentsRequest {
    string post_id = 1;
    int32 n = 2; // Number of top comments to retrieve
}

message TopNCommentsResponse {
    repeated Comment comments = 1;
    repeated bool has_replies = 2; // Corresponds to each comment
}

message ExpandCommentBranchRequest {
    string comment_id = 1;
    int32 n = 2;
}

message ExpandCommentBranchResponse {
    repeated Comment comments = 1; // Top N comments under the given comment and under those comments
}

message MonitorUpdatesRequest {
    string post_id = 1;
    repeated string comment_ids = 2; // Comment IDs to monitor
}

message ScoreUpdate {
    string item_id = 1; // Post or Comment ID
    int32 new_score = 2;
}



// // Supporting messages for the service
// message UpvoteDownvoteRequest {
//     string item_id = 1; // Post or Comment ID
//     bool upvote = 2; // True for upvote, false for downvote
// }

// message PostRequest {
//     string post_id = 1;
// }

// message TopNCommentsRequest {
//     string post_id = 1;
//     int32 n = 2; // Number of top comments to retrieve
// }

// message TopNCommentsResponse {
//     repeated Comment comments = 1;
//     repeated bool has_replies = 2; // Corresponds to each comment
// }

// message ExpandCommentBranchRequest {
//     string comment_id = 1;
//     int32 n = 2;
// }

// message ExpandCommentBranchResponse {
//     repeated Comment comments = 1; // Top N comments under the given comment and under those comments
// }

// message MonitorUpdatesRequest {
//     string post_id = 1;
//     repeated string comment_ids = 2; // Comment IDs to monitor
// }

// message ScoreUpdate {
//     string item_id = 1; // Post or Comment ID
//     int32 new_score = 2;
// }







// // Messages
// message User {
//     string id = 1;
//     string username = 2;
//     string email = 3;
//     string bio = 4;
//     // Additional fields - profile picture?
//   }

// message Post {
//     int32 id = 1;
//     User author = 2;
//     string title = 3;
//     string content = 4;
//     int32 score = 5;
//     string creation_date = 6; 
//     int32 subreddit_id = 7; // Extra credit

//     // Additional fields - last modified date, etc.
// }

// message Comment {
//     string id = 1;
//     User author = 2;
//     string parent_id = 3; // Post ID or Comment ID
//     string content = 4;
//     int32 score = 5;
//     enum Status {
//       NORMAL = 0;
//       HIDDEN = 1;
//     }
//     Status status = 6;
//     string publication_date = 7;
// }

// // Extra
// message Subreddit {
//     string id = 1;
//     string name = 2;
//     enum Visibility {
//       PUBLIC = 0;
//       PRIVATE = 1;
//       HIDDEN = 2;
//     }
//     Visibility visibility = 3;
//     repeated string tags = 4; // List of tags associated with the subreddit
// }

// Request and Response

// // Create Post
// message CreatePostRequest {
//     User author = 1;
//     string title = 2;
//     string content = 3;
//     string subreddit_id = 4; // For extra credit
// }
  
// message CreatePostResponse {
//     Post post = 1;
// }

// // Vote Post

// message VoteRequest {
//     string entity_id = 1; // Post or Comment ID
//     bool upvote = 2; // true for upvote, false for downvote
// }
  
// message VoteResponse {
//     int32 new_score = 1;
// }
 
// // Get Post

// message GetPostRequest {
//     string post_id = 1;
// }
  
// message GetPostResponse {
//     Post post = 1;
// }

// // Create Comment
// message CreateCommentRequest {
//     User author = 1;
//     string parent_id = 2; // Post ID or Comment ID
//     string content = 3;
// }
  
// message CreateCommentResponse {
//     Comment comment = 1;
// }
  
// // Get Top Comments  

// message GetTopCommentsRequest {
//     string post_id = 1;
//     int32 number_of_comments = 2;
// }
  
// message CommentsList {
//     repeated Comment comments = 1;
// }
  
// message GetTopCommentsResponse {
//     CommentsList comments_list = 1;
// }

// // ExpandCommentBranch

// message ExpandCommentBranchRequest {
//     string comment_id = 1;
//     int32 number_of_comments = 2;
// }
  
// message CommentBranch {
//     Comment parent_comment = 1;
//     CommentsList top_comments = 2;
// }
  
// message ExpandCommentBranchResponse {
//     CommentBranch comment_branch = 1;
// }


// // Extra - monitor Update

// message MonitorUpdatesRequest {
//     string post_id = 1;
//     repeated string comment_ids = 2;
// }
  
// message UpdateStream {
//     string entity_id = 1; // Post or Comment ID
//     int32 new_score = 2;
// }
  